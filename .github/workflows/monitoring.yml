name: Support Monitoring & Alerts

on:
  # schedule:
  #   - cron: "0 12 * * *"  # Daily at 12:00 UTC (after clustering at 11:00)
  workflow_dispatch: {}    # Manual trigger

concurrency:
  group: support-monitoring
  cancel-in-progress: false

jobs:
  monitoring:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pandas

      - name: Run Support Monitoring
        id: monitoring
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

          # Alert thresholds
          TICKET_SPIKE_THRESHOLD: "50.0"      # 50% volume increase triggers alert
          SENTIMENT_DROP_THRESHOLD: "-0.3"    # Significant sentiment decline
          HIGH_SEVERITY_THRESHOLD: "3"        # 3+ critical clusters
          VOLUME_SPIKE_THRESHOLD: "20"        # 20+ tickets in single theme

          # Notification settings
          GITHUB_ISSUE_ALERTS: "true"         # Create GitHub issues for alerts

        run: |
          echo "🔍 Running support monitoring checks..."
          python scripts/monitoring_alerts.py

      - name: Check for Critical Alerts
        id: check_alerts
        run: |
          if [ -f "critical_alerts_detected.flag" ]; then
            echo "critical_alerts=true" >> $GITHUB_OUTPUT
            echo "alert_count=$(cat critical_alerts_detected.flag)" >> $GITHUB_OUTPUT
          else
            echo "critical_alerts=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Critical Alert Issue
        if: steps.check_alerts.outputs.critical_alerts == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          # Generate critical alert summary
          python -c "
          import os
          from datetime import datetime, timedelta
          from supabase import create_client

          url = os.environ['SUPABASE_URL']
          key = os.environ.get('SUPABASE_SERVICE_ROLE_KEY') or os.environ.get('SUPABASE_ANON_KEY')
          sb = create_client(url, key)

          # Quick check for recent spikes
          last_24h = (datetime.now() - timedelta(hours=24)).isoformat()
          prev_24h = (datetime.now() - timedelta(hours=48)).isoformat()

          current = sb.table('raw_gorgias').select('id', count='exact').gte('created_datetime', last_24h).execute()
          previous = sb.table('raw_gorgias').select('id', count='exact').gte('created_datetime', prev_24h).lt('created_datetime', last_24h).execute()

          current_count = current.count or 0
          previous_count = previous.count or 0
          change = ((current_count - previous_count) / previous_count * 100) if previous_count > 0 else 0

          critical_summary = f\"\"\"## 🚨 CRITICAL SUPPORT ALERT

          **Detected**: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}

          ### Issue Summary
          Critical thresholds exceeded in customer support metrics.

          ### Quick Metrics
          - **24h Ticket Volume**: {current_count} (vs {previous_count} previous)
          - **Volume Change**: {change:+.1f}%

          ### Immediate Actions Required
          1. 🔍 **Investigate** root cause of metric changes
          2. 📊 **Review** detailed monitoring report in workflow logs
          3. 🚀 **Escalate** to appropriate teams if needed
          4. 📝 **Document** findings and actions taken

          ### Resources
          - [View detailed monitoring report](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
          - [Support dashboard](https://app.supabase.com/project/YOUR_PROJECT)
          - [Clustering analysis](${{github.server_url}}/${{github.repository}}/actions/workflows/cluster.yml)

          **Priority**: HIGH - Address within 2 hours
          **Auto-generated by**: Support Monitoring System\"\"\"

          print(critical_summary)
          " > critical_alert.txt

          # Create urgent GitHub issue
          gh issue create \
            --title \"🚨 CRITICAL SUPPORT ALERT - $(date +'%Y-%m-%d %H:%M UTC')\" \
            --body-file critical_alert.txt \
            --label \"critical,support-alert,urgent\" \
            --assignee \"${{ github.actor }}\" || echo \"Critical issue creation failed\"

      - name: Update Monitoring Status
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Update or create monitoring status issue
          ISSUE_TITLE="📊 Support Monitoring Status - $(date +'%Y-%m')"

          # Check if monthly status issue exists
          EXISTING_ISSUE=$(gh issue list --label "monitoring-status" --state open --limit 1 --json number,title | jq -r '.[0].number // "none"')

          STATUS_BODY="## 📊 Support Monitoring Dashboard

          **Last Check**: $(date +'%Y-%m-%d %H:%M UTC')
          **Status**: ${{ job.status == 'success' && '🟢 All Clear' || '🔴 Alerts Detected' }}

          ### Recent Activity
          - [Latest monitoring run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View all monitoring history](${{ github.server_url }}/${{ github.repository }}/actions/workflows/monitoring.yml)

          ### Quick Actions
          - [📊 Generate business report](${{ github.server_url }}/${{ github.repository }}/actions/workflows/business_report.yml)
          - [🔄 Run clustering analysis](${{ github.server_url }}/${{ github.repository }}/actions/workflows/cluster.yml)
          - [📈 Trigger full pipeline sync](${{ github.server_url }}/${{ github.repository }}/actions/workflows/ingest.yml)

          ### Monitoring Configuration
          - **Frequency**: Every 6 hours
          - **Ticket Volume Alert**: >50% increase
          - **Sentiment Alert**: <-0.3 change
          - **High Severity Alert**: 3+ critical clusters

          *Updated automatically by monitoring system*"

          if [ "$EXISTING_ISSUE" != "none" ]; then
            # Update existing issue
            echo "$STATUS_BODY" | gh issue edit "$EXISTING_ISSUE" --body-file -
          else
            # Create new monthly status issue
            echo "$STATUS_BODY" | gh issue create \
              --title "$ISSUE_TITLE" \
              --body-file - \
              --label "monitoring-status,automated" || echo "Status issue creation failed"
          fi